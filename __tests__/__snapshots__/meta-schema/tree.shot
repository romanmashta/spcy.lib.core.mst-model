// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Process model meta-schema 1`] = `
{
  "TypeInfo": "(ObjectType | StringType | BooleanType | NumberType | DateType | NullType | ArrayType | TypeReference | EnumType | ConstLiteral | OneOf | AllOf)",
  "TypeReference": "{ $id: (string | undefined?); $ref: string; $refPackage: (string | undefined?); $arguments: (TypeReference[] | undefined?) }",
  "ArrayType": "{ $id: (string | undefined?); type: \\"array\\"; items: (late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); })); minItems: (number | undefined?); maxItems: (number | undefined?); uniqueItems: (boolean | undefined?) }",
  "ConstLiteral": "{ $id: (string | undefined?); const: (string | number | boolean | null) }",
  "EnumType": "{ $id: (string | undefined?); enum: string[] }",
  "NullType": "{ $id: (string | undefined?); type: \\"null\\" }",
  "DateType": "{ $id: (string | undefined?); type: \\"date\\" }",
  "BooleanType": "{ $id: (string | undefined?); type: \\"boolean\\" }",
  "StringType": "{ $id: (string | undefined?); type: \\"string\\"; minLength: (number | undefined?); maxLength: (number | undefined?); pattern: (string | undefined?) }",
  "NumberType": "{ $id: (string | undefined?); type: \\"number\\"; minimum: (number | undefined?); maximum: (number | undefined?) }",
  "ObjectType": "{ $id: (string | undefined?); type: \\"object\\"; required: (string[] | undefined?); properties: (Map<string, (late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }))> | undefined?); additionalProperties: (((late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); })) | boolean) | undefined?) }",
  "OneOf": "{ $id: (string | undefined?); oneOf: (late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }))[] }",
  "AllOf": "{ $id: (string | undefined?); allOf: (late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }))[] }",
  "Module": "{ $id: (string | undefined?); $defs: Map<string, (late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }) | late(function () { return _this.lateResolve(def.$ref); }))>? }",
  "ExportModule": "{ fileName: string; importName: string; aliasName: string }",
  "SourceFile": "{ fileName: string; moduleName: string; moduleFileName: string; exports: ExportModule[]; module: Module; isEmpty: boolean }",
  "MetaInfo": "{ sourceFiles: SourceFile[]; modules: Module[]; hasErrors: boolean }"
}
`;
