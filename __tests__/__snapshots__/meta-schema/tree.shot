// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Process model meta-schema 1`] = `
{
  "#/$defs/TypeInfo": "(#/$defs/ObjectType | #/$defs/StringType | #/$defs/BooleanType | #/$defs/NumberType | #/$defs/DateType | #/$defs/NullType | #/$defs/ArrayType | #/$defs/TypeReference | #/$defs/EnumType | #/$defs/ConstLiteral | #/$defs/OneOf | #/$defs/AllOf)",
  "#/$defs/TypeReference": "{ $id: (string | undefined?); $ref: string; $package: (string | undefined?) }",
  "#/$defs/ArrayType": "{ $id: (string | undefined?); type: \\"array\\"; items: (late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); })); minItems: (number | undefined?); maxItems: (number | undefined?); uniqueItems: (boolean | undefined?) }",
  "#/$defs/ConstLiteral": "{ $id: (string | undefined?); const: (string | number | boolean | null) }",
  "#/$defs/EnumType": "{ $id: (string | undefined?); enum: string[] }",
  "#/$defs/NullType": "{ $id: (string | undefined?); type: \\"null\\" }",
  "#/$defs/DateType": "{ $id: (string | undefined?); type: \\"date\\" }",
  "#/$defs/BooleanType": "{ $id: (string | undefined?); type: \\"boolean\\" }",
  "#/$defs/StringType": "{ $id: (string | undefined?); type: \\"string\\"; minLength: (number | undefined?); maxLength: (number | undefined?); pattern: (string | undefined?) }",
  "#/$defs/NumberType": "{ $id: (string | undefined?); type: \\"number\\"; minimum: (number | undefined?); maximum: (number | undefined?) }",
  "#/$defs/ObjectType": "{ $id: (string | undefined?); type: \\"object\\"; required: (string[] | undefined?); properties: (Map<string, (late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }))> | undefined?); additionalProperties: (((late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); })) | boolean) | undefined?) }",
  "#/$defs/OneOf": "{ $id: (string | undefined?); oneOf: (late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }))[] }",
  "#/$defs/AllOf": "{ $id: (string | undefined?); allOf: (late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }))[] }",
  "#/$defs/Module": "{ $defs: Map<string, (late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }))>? }",
  "#/$defs/SourceFile": "{ fileName: string; module: #/$defs/Module }",
  "#/$defs/MetaInfo": "{ sourceFiles: #/$defs/SourceFile[]; modules: #/$defs/Module[]; hasErrors: boolean }"
}
`;
