import { MetaSchema, Module } from '@spcy/lib.core.reflection';
import { TestCase } from '../test-case';

export const testCase: TestCase<Module> = {
  meta: MetaSchema,
  tree: {
    '#/$defs/AllOf':
      '{ $id: (string | undefined?); allOf: (late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }))[] }',
    '#/$defs/ArrayType':
      '{ $id: (string | undefined?); type: "array"; items: (late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); })); minItems: (number | undefined?); maxItems: (number | undefined?); uniqueItems: (boolean | undefined?) }',
    '#/$defs/BooleanType': '{ $id: (string | undefined?); type: "boolean" }',
    '#/$defs/ConstLiteral': '{ $id: (string | undefined?); const: (string | number | boolean | null) }',
    '#/$defs/DateType': '{ $id: (string | undefined?); type: "date" }',
    '#/$defs/EnumType': '{ $id: (string | undefined?); enum: string[] }',
    '#/$defs/MetaInfo': '{ sourceFiles: #/$defs/SourceFile[]; modules: #/$defs/Module[]; hasErrors: boolean }',
    '#/$defs/Module':
      '{ $defs: Map<string, (late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }))>? }',
    '#/$defs/NullType': '{ $id: (string | undefined?); type: "null" }',
    '#/$defs/NumberType':
      '{ $id: (string | undefined?); type: "number"; minimum: (number | undefined?); maximum: (number | undefined?) }',
    '#/$defs/ObjectType':
      '{ $id: (string | undefined?); type: "object"; required: (string[] | undefined?); properties: (Map<string, (late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }))> | undefined?); additionalProperties: (((late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); })) | boolean) | undefined?) }',
    '#/$defs/OneOf':
      '{ $id: (string | undefined?); oneOf: (late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }) | late(function () { return _this.resolver.resolve(def.$ref); }))[] }',
    '#/$defs/SourceFile': '{ fileName: string; module: #/$defs/Module }',
    '#/$defs/StringType':
      '{ $id: (string | undefined?); type: "string"; minLength: (number | undefined?); maxLength: (number | undefined?); pattern: (string | undefined?) }',
    '#/$defs/TypeInfo':
      '(#/$defs/ObjectType | #/$defs/StringType | #/$defs/BooleanType | #/$defs/NumberType | #/$defs/DateType | #/$defs/NullType | #/$defs/ArrayType | #/$defs/TypeReference | #/$defs/EnumType | #/$defs/ConstLiteral | #/$defs/OneOf | #/$defs/AllOf)',
    '#/$defs/TypeReference': '{ $id: (string | undefined?); $ref: string; $package: (string | undefined?) }'
  },
  rootType: MetaSchema.$defs.Module,
  data: MetaSchema
};
